#!/usr/bin/env node

var fs = require('fs');
var EOL = require('os').EOL;
var path = require('path');
var util = require('util');
var base = path.normalize(path.join(__dirname, '..'));
var qt = require('../test/fixtures/qt');
var config = require('../test/util/config');
var pkg = require('../package.json');
var output = process.argv[2] || path.join(base, 'doc', 'cheatsheet.md');
var heading = util.format('## %s(1) cheatsheet', pkg.name);
var description = 'API methods yet to be implemented are marked '
description += 'with a strikethrough.';

var rules = [], st = '~~';
rules.push({src: config.server.default, rep: qt.params.server});
rules.push({src: config.database.default, rep: qt.params.db});
rules.push({src: config.database.users, rep: qt.params.db});
rules.push({src: config.design.auth, rep: qt.params.ddoc});


rules.push({src: config.conf.section, rep: qt.params.section});
rules.push({src: config.conf.key, rep: qt.params.key});
rules.push({src: config.conf.value, rep: qt.params.value});

rules.push({src: config.admin.name, rep: qt.params.name});
rules.push({src: config.admin.pass, rep: qt.params.pass});

function replace(str) {
  for(var i = 0;i < rules.length;i++) {
    str = str.replace(new RegExp(rules[i].src, 'g'), rules[i].rep);
  }
  return str;
}

function tidy(u) {
  u = u.replace(/\.html/, '');
  u = u.replace(/_/g, '-');
  u = u.replace(/-{2,}/g, '-');
  u = u.replace(/-+$/, '');
  return u;
}

function build() {
  var DNL = EOL + EOL;
  var str = heading + DNL + description + DNL;
  var i, item, exe = pkg.name, nm, cmds, cmd, pre, post, disabled;
  for(i = 0;i < qt.length;i++) {
    item = qt[i];
    pre = post = '';
    disabled = item.enabled === false;
    if(disabled) {
      pre = post = st;
    }
    //console.dir(item);
    cmds = item.cmd.slice(0);
    cmds.unshift(exe);
    nm = item.cmd[0];
    str += '### ' + pre + item.req + post + DNL;
    str += item.description + (disabled ? '.' : ':') + DNL;
    if(!disabled) {
      str += '```' + EOL + replace(cmds.join(' ')) + EOL + '```' + DNL;
    }
    str += 'Documentation: '
      + util.format('[%s](%s)', tidy(item.doc), item.url) + DNL;
  }
  return str;
}

process.stdout.write(build());
process.exit(0);
