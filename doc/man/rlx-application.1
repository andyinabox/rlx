.TH "RLX-APPLICATION" "1" "September 2014" "rlx-application 0.1.276" "User Commands"
.SH "NAME"
rlx-application -- Manage design document applications.
.SH "SYNOPSIS"

.SP
rlx application <command> <args>
.br
rlx app <command> <args> 
.br
rlx app ls <args> 
.br
rlx app push <args> <dir> 
.br
rlx app deploy <args> <dir> 
.br
rlx app get <args> 
.br
rlx app info <args> 
.br
rlx app cp <args> 
.br
rlx app head <args> 
.br
rlx app attach <args> 
.br
rlx app view <args> 
.br
rlx app update <args> 
.br
rlx app show <args> 
.br
rlx app list <args> 
.br
rlx app rewrite <args> [verb] <path> 
.br
rlx app rm <args>
.SH "DESCRIPTION"
.PP
Commands for managing applications (design documents).
.PP
If no subcommand is specified \fBls\fR is invoked.
.SH "COMMANDS"
.BL
.IP "\[ci]" 4
\fBls\fR: List design documents.
.IP "\[ci]" 4
\fBpush\fR: Push a design document.
.IP "\[ci]" 4
\fBdeploy\fR: Deploy views in live environment.
.IP "\[ci]" 4
\fBget\fR: Get a design document.
.IP "\[ci]" 4
\fBinfo\fR: Get design document information.
.IP "\[ci]" 4
\fBcp\fR: Copy a design document.
.IP "\[ci]" 4
\fBhead\fR: Get minimal design document information.
.IP "\[ci]" 4
\fBattach, att\fR: Attachment commands for design documents.
.IP "\[ci]" 4
\fBview\fR: Query a design document view.
.IP "\[ci]" 4
\fBupdate\fR: Put a design document update.
.IP "\[ci]" 4
\fBshow\fR: Show a document.
.IP "\[ci]" 4
\fBlist\fR: Run a list function on a view.
.IP "\[ci]" 4
\fBrewrite\fR: Run a rewrite rule path.
.IP "\[ci]" 4
\fBrm\fR: Remove a design document.
.EL
.SH "TERMINOLOGY"
.PP
The terms \fBapp\fR, \fBapplication\fR and \fBdesign document\fR are used interchangeably, for all intents and purposes an application \fIis\fR a design document except it is represented on the file system as a series of files rather than a single JSON document with attachments.
.SH "FILESYSTEM LAYOUT"
.PP
The layout for an application at it's simplest just includes an \fBindex.json\fR file which indicates the language for a design document. However without any additional files it is an empty design document, a simple application might look like:

.SP
  app/
.br
  ├── index.json
.br
  └── validate_doc_update.js
.PP
A complete application layout looks like:

.SP
  app/
.br
  ├── attachments
.br
  ├── docs
.br
  ├── filters
.br
  ├── index.json
.br
  ├── lib
.br
  ├── lists
.br
  ├── rewrites.js
.br
  ├── shows
.br
  ├── updates
.br
  ├── validate_doc_update.js
.br
  └── views
.br
      └── lib
.SH "SYSTEM TEMPLATES"
.PP
The bundled system template directory contains:
.BL
.IP "\[ci]" 4
\fBminimal\fR: Minimum required files to define an application.
.IP "\[ci]" 4
\fBvalidate\fR: An application template with a \fBvaliate_doc_update\fR function.
.IP "\[ci]" 4
\fBview\fR: A view based template with a single view named \fBall\fR.
.IP "\[ci]" 4
\fBfull\fR: A full application template including all directories.
.EL
.SH "IDENTIFIERS"
.PP
Most subcommands allow \fB\-\-id\fR and \fB\-\-ddoc\fR to be used interchangeably (they always refer to a design document id), however the commands \fBshow\fR, \fBlist\fR and \fBupdate\fR distinguish between a design document id (\fB\-\-ddoc\fR) and a document id (\fB\-\-id\fR) as they accept a document to use during execution.
.SH "ATTACHMENTS"
.PP
The \fBatt\fR subcommand is provided as a convenience for attaching to design documents, it defers to the top\-level \fBatt\fR command with the \fB\-\-ddoc\fR option specified, see \fBhelp att\fR for more information.
.SH "DEPLOY"
.PP
Typically during development you would use the \fBpush\fR command to upload the design document, it is then your responsibility to query a view to update the view indices for the design document. In a live environment the correct procedure involves a few document copies, waiting for view index updates to complete and cleaning stale views.
.PP
The \fBdeploy\fR command will follow the steps:
.BL

  1.  Delete any existing backup or new design documents.

  2.  Check design document for existence, if it does not exist it is saved.

  3.  Copy the existing design document to a backup.

  4.  Upload the new design document with a new name.

  5.  Query a view on the new design document.

  6.  Wait for view index generation to complete.

  7.  Copy the new design document to the existing design document.

  8.  Delete the backup and new design document.

  9.  Clean up stale view indices for the database.
.EL
.SH "BUGS"
.PP
Report bugs to https://github.com/freeformsystems/rlx/issues.
