.TH "RLX-BATCH" "1" "August 2015" "rlx-batch 0.1.420" "User Commands"
.SH "NAME"
rlx-batch -- Batch file execution.
.SH "USAGE"

.SP
rlx batch <command> <args> 
.br
rlx batch parse <args> <file...> 
.br
rlx batch exec <args> <file...>
.SH "DESCRIPTION"
.PP
Parse and execute batch files.
.PP
Batch files are executed in the context of the current process.
.SH "COMMANDS"
.BL
.IP "\[ci]" 4
\fBparse\fR: Parse files and print result.
.IP "\[ci]" 4
\fBexec\fR: Execute batch files.
.EL
.SH "BATCH\-DEFINITIONS"
.PP
Batch file definitions may be Javascript or JSON, Javascript is preferable and recommended. Use the \fBparse\fR command to inspect what would be executed.
.PP
Reserved keywords in batch files are \fBconf\fR, \fBexec\fR and \fBcmd\fR.
.PP
A batch file is an object with an \fBexec\fR array:

.SP
  module.exports = {
.br
    server: '{server}',
.br
    exec: [
.br
      'info'
.br
    ]
.br
  }
.PP
Fields defined at the top\-level are assigned to the program , such that you can set the server, database and other useful options. These properties last for the duration of the batch file execution.
.PP
An entry in the \fBexec\fR array may be:
.BL

  1.  A string, it is split into an array of raw arguments using a space character.

  2.  An array of raw arguments to parse.

  3.  An object containing a \fBcmd\fR array with optional additional fields.
.EL
.PP
When specifying an object as an \fBexec\fR the format is:

.SP
  module.exports = {
.br
    server: '{server}',
.br
    exec: [
.br
      {
.br
        cmd: ['db', 'rm'],
.br
        interactive: false
.br
      }
.br
    ]
.br
  }
.br
  // => ['db', 'rm', '\-\-no\-interactive']
.PP
You can specify arguments that accept multiple parameters as arrays and they are expanded to multiple options:

.SP
  module.exports = {
.br
    server: '{server}',
.br
    exec: [
.br
      {
.br
        cmd: ['tpl', 'ls'],
.br
        glob: ['db/**', 'design/**']
.br
      }
.br
    ]
.br
  }
.br
  // => ['tpl', 'ls', '\-\-glob', 'db/**', '\-\-glob', 'design/**']
.PP
The \fB\-\-json\fR option is a special case, you may specify a string and it is treated as a JSON string literal any other type is passed to \fBJSON.stringify\fR. For example:

.SP
  module.exports = {
.br
    server: '{server}',
.br
    exec: [
.br
      {
.br
        cmd: ['lint'],
.br
        json: {
.br
          field: "value"
.br
        }
.br
      }
.br
    ]
.br
  }
.br
  // => ['lint', '\-\-json', '{"field":"value"}']
.PP
For advanced use cases that need asynchronous logic you may export a function.
.PP
The function is passed a callback function with the signature \fBcb(err, batch)\fR where \fBbatch\fR should be a valid batch file.

.SP
  module.exports = function batch(cb) {
.br
    var def = {
.br
      server: '{server}',
.br
      exec: [
.br
        {
.br
          cmd: ['info']
.br
        }
.br
      ]
.br
    }
.br
    cb(null, def);
.br
  }
.SH "BUGS"
.PP
Report bugs to https://github.com/freeformsystems/rlx/issues.
